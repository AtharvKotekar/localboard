"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/FullscreenButton.tsx":
/*!*********************************************!*\
  !*** ./src/components/FullscreenButton.tsx ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FullscreenButton)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nfunction FullscreenButton() {\n    _s();\n    const [isFullscreen, setIsFullscreen] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"FullscreenButton.useEffect\": ()=>{\n            const handleFullscreenChange = {\n                \"FullscreenButton.useEffect.handleFullscreenChange\": ()=>{\n                    setIsFullscreen(!!document.fullscreenElement);\n                }\n            }[\"FullscreenButton.useEffect.handleFullscreenChange\"];\n            document.addEventListener('fullscreenchange', handleFullscreenChange);\n            return ({\n                \"FullscreenButton.useEffect\": ()=>document.removeEventListener('fullscreenchange', handleFullscreenChange)\n            })[\"FullscreenButton.useEffect\"];\n        }\n    }[\"FullscreenButton.useEffect\"], []);\n    const toggleFullscreen = async ()=>{\n        try {\n            if (!document.fullscreenElement) {\n                await document.documentElement.requestFullscreen();\n            } else {\n                await document.exitFullscreen();\n            }\n        } catch (error) {\n            console.error('Error toggling fullscreen:', error);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n        onClick: toggleFullscreen,\n        className: \" fixed top-6 right-6 z-50  flex items-center space-x-3 px-4 py-3  bg-black/80 backdrop-blur-lg minimal-border  rounded-lg text-gray-400 hover:text-fluorescent-green  hover:border-fluorescent-green/50 hover:bg-fluorescent-green/5 transition-all duration-300 group mono \",\n        title: isFullscreen ? 'Exit Fullscreen' : 'Enter Fullscreen (Perfect for TV displays)',\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                className: \"text-lg\",\n                children: isFullscreen ? 'â›¶' : 'ðŸ“º'\n            }, void 0, false, {\n                fileName: \"/Users/atharv/Desktop/localboard/src/components/FullscreenButton.tsx\",\n                lineNumber: 42,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                className: \"text-sm font-semibold\",\n                children: isFullscreen ? 'Exit TV Mode' : 'TV Mode'\n            }, void 0, false, {\n                fileName: \"/Users/atharv/Desktop/localboard/src/components/FullscreenButton.tsx\",\n                lineNumber: 45,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/atharv/Desktop/localboard/src/components/FullscreenButton.tsx\",\n        lineNumber: 30,\n        columnNumber: 5\n    }, this);\n}\n_s(FullscreenButton, \"bbrde04c+cD2/wxWG6d9pzH92bA=\");\n_c = FullscreenButton;\nvar _c;\n$RefreshReg$(_c, \"FullscreenButton\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL0Z1bGxzY3JlZW5CdXR0b24udHN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUUyQztBQUU1QixTQUFTRTs7SUFDdEIsTUFBTSxDQUFDQyxjQUFjQyxnQkFBZ0IsR0FBR0osK0NBQVFBLENBQUM7SUFFakRDLGdEQUFTQTtzQ0FBQztZQUNSLE1BQU1JO3FFQUF5QjtvQkFDN0JELGdCQUFnQixDQUFDLENBQUNFLFNBQVNDLGlCQUFpQjtnQkFDOUM7O1lBRUFELFNBQVNFLGdCQUFnQixDQUFDLG9CQUFvQkg7WUFDOUM7OENBQU8sSUFBTUMsU0FBU0csbUJBQW1CLENBQUMsb0JBQW9CSjs7UUFDaEU7cUNBQUcsRUFBRTtJQUVMLE1BQU1LLG1CQUFtQjtRQUN2QixJQUFJO1lBQ0YsSUFBSSxDQUFDSixTQUFTQyxpQkFBaUIsRUFBRTtnQkFDL0IsTUFBTUQsU0FBU0ssZUFBZSxDQUFDQyxpQkFBaUI7WUFDbEQsT0FBTztnQkFDTCxNQUFNTixTQUFTTyxjQUFjO1lBQy9CO1FBQ0YsRUFBRSxPQUFPQyxPQUFPO1lBQ2RDLFFBQVFELEtBQUssQ0FBQyw4QkFBOEJBO1FBQzlDO0lBQ0Y7SUFFQSxxQkFDRSw4REFBQ0U7UUFDQ0MsU0FBU1A7UUFDVFEsV0FBVTtRQVFWQyxPQUFPaEIsZUFBZSxvQkFBb0I7OzBCQUUxQyw4REFBQ2lCO2dCQUFLRixXQUFVOzBCQUNiZixlQUFlLE1BQU07Ozs7OzswQkFFeEIsOERBQUNpQjtnQkFBS0YsV0FBVTswQkFDYmYsZUFBZSxpQkFBaUI7Ozs7Ozs7Ozs7OztBQUl6QztHQTdDd0JEO0tBQUFBIiwic291cmNlcyI6WyIvVXNlcnMvYXRoYXJ2L0Rlc2t0b3AvbG9jYWxib2FyZC9zcmMvY29tcG9uZW50cy9GdWxsc2NyZWVuQnV0dG9uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBGdWxsc2NyZWVuQnV0dG9uKCkge1xuICBjb25zdCBbaXNGdWxsc2NyZWVuLCBzZXRJc0Z1bGxzY3JlZW5dID0gdXNlU3RhdGUoZmFsc2UpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVGdWxsc2NyZWVuQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgc2V0SXNGdWxsc2NyZWVuKCEhZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQpXG4gICAgfVxuXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZnVsbHNjcmVlbmNoYW5nZScsIGhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UpXG4gICAgcmV0dXJuICgpID0+IGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2UnLCBoYW5kbGVGdWxsc2NyZWVuQ2hhbmdlKVxuICB9LCBbXSlcblxuICBjb25zdCB0b2dnbGVGdWxsc2NyZWVuID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIWRvY3VtZW50LmZ1bGxzY3JlZW5FbGVtZW50KSB7XG4gICAgICAgIGF3YWl0IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZXF1ZXN0RnVsbHNjcmVlbigpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhd2FpdCBkb2N1bWVudC5leGl0RnVsbHNjcmVlbigpXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHRvZ2dsaW5nIGZ1bGxzY3JlZW46JywgZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICBvbkNsaWNrPXt0b2dnbGVGdWxsc2NyZWVufVxuICAgICAgY2xhc3NOYW1lPVwiXG4gICAgICAgIGZpeGVkIHRvcC02IHJpZ2h0LTYgei01MCBcbiAgICAgICAgZmxleCBpdGVtcy1jZW50ZXIgc3BhY2UteC0zIHB4LTQgcHktMyBcbiAgICAgICAgYmctYmxhY2svODAgYmFja2Ryb3AtYmx1ci1sZyBtaW5pbWFsLWJvcmRlciBcbiAgICAgICAgcm91bmRlZC1sZyB0ZXh0LWdyYXktNDAwIGhvdmVyOnRleHQtZmx1b3Jlc2NlbnQtZ3JlZW4gXG4gICAgICAgIGhvdmVyOmJvcmRlci1mbHVvcmVzY2VudC1ncmVlbi81MCBob3ZlcjpiZy1mbHVvcmVzY2VudC1ncmVlbi81XG4gICAgICAgIHRyYW5zaXRpb24tYWxsIGR1cmF0aW9uLTMwMCBncm91cCBtb25vXG4gICAgICBcIlxuICAgICAgdGl0bGU9e2lzRnVsbHNjcmVlbiA/ICdFeGl0IEZ1bGxzY3JlZW4nIDogJ0VudGVyIEZ1bGxzY3JlZW4gKFBlcmZlY3QgZm9yIFRWIGRpc3BsYXlzKSd9XG4gICAgPlxuICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC1sZ1wiPlxuICAgICAgICB7aXNGdWxsc2NyZWVuID8gJ+KbticgOiAn8J+Tuid9XG4gICAgICA8L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzc05hbWU9XCJ0ZXh0LXNtIGZvbnQtc2VtaWJvbGRcIj5cbiAgICAgICAge2lzRnVsbHNjcmVlbiA/ICdFeGl0IFRWIE1vZGUnIDogJ1RWIE1vZGUnfVxuICAgICAgPC9zcGFuPlxuICAgIDwvYnV0dG9uPlxuICApXG59Il0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlRWZmZWN0IiwiRnVsbHNjcmVlbkJ1dHRvbiIsImlzRnVsbHNjcmVlbiIsInNldElzRnVsbHNjcmVlbiIsImhhbmRsZUZ1bGxzY3JlZW5DaGFuZ2UiLCJkb2N1bWVudCIsImZ1bGxzY3JlZW5FbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b2dnbGVGdWxsc2NyZWVuIiwiZG9jdW1lbnRFbGVtZW50IiwicmVxdWVzdEZ1bGxzY3JlZW4iLCJleGl0RnVsbHNjcmVlbiIsImVycm9yIiwiY29uc29sZSIsImJ1dHRvbiIsIm9uQ2xpY2siLCJjbGFzc05hbWUiLCJ0aXRsZSIsInNwYW4iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/FullscreenButton.tsx\n"));

/***/ })

});